<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.28 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-kazuho-h2-cache-digest-00" category="info">

  <front>
    <title>Cache Digests for HTTP/2</title>

    <author initials="K." surname="Oku" fullname="Kazuho Oku">
      <organization>DeNA Co, Ltd.</organization>
      <address>
        <email>kazuhooku@gmail.com</email>
      </address>
    </author>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2015"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines a HTTP/2 frame type to allow clients to inform the server of their
cache’s contents. Servers can then use this to inform their choices of what to push to clients.</t>



    </abstract>


    <note title="Note to Readers">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/h2-cache-digest">https://github.com/mnot/I-D/labels/h2-cache-digest</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/h2-cache-digest/">https://mnot.github.io/I-D/h2-cache-digest/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/h2-cache-digest">https://github.com/mnot/I-D/commits/gh-pages/h2-cache-digest</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP/2 <xref target="RFC7540"/> allows a server to “push” synthetic request/response pairs into a client’s cache
optimistically. While there is strong interest in using this facility to improve perceived Web
browsing performance, it is sometimes counterproductive because the client might already have
cached the “pushed” response.</t>

<t>When this is the case, the bandwidth used to “push” the response is effectively wasted, and
represents opportunity cost, because it could be used by other, more relevant responses. HTTP/2
allows a stream to be cancelled by a client using a RST_STREAM frame in this situation, but there
is still at least one round trip of potentially wasted capacity even then.</t>

<t>This specification defines a HTTP/2 frame type to allow clients to inform the server of their
cache’s contents using a Golumb-Rice Coded Set. Servers can then use this to inform their choices
of what to push to clients.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-cachedigest-frame" title="The CACHE_DIGEST Frame">

<t>The CACHE_DIGEST frame type is 0xf1. NOTE: This is an experimental value; if standardised, a permanent value will be assigned.</t>

<t>A CACHE_DIGEST frame can be sent from a client to a server on any stream in the “open” state, and
conveys a digest of the contents of the cache associated with that stream, as explained in
<xref target="computing"/>.</t>

<t>In typical use, a client will send CACHE_DIGEST immediately after the first request on a connection
for a given origin, on the same stream, because there is usually a short period of inactivity then,
and servers can benefit most when they understand the state of the cache before they begin pushing
associated assets (e.g., CSS, JavaScript and images).</t>

<t>Clients MAY send CACHE_DIGEST at other times, but servers ought not expect frequent updates;
instead, if they wish to continue to utilise the digest, they will need update it with responses
sent to that client on the connection.</t>

<t>Servers MUST NOT use any but the most recent CACHE_DIGEST for a given origin as current, and MUST
treat an empty Digest-Value as effectively clearing all stored digests for that origin.</t>

<t>CACHE_DIGEST has no defined meaning when sent from servers to clients, and MAY be ignored.</t>

<figure><artwork><![CDATA[
+---------------------------------------------------------------+
|         Digest-Value? (*)                    ...
+---------------------------------------------------------------+
]]></artwork></figure>

<t>The CACHE_DIGEST frame payload has the following fields:</t>

<t><list style="symbols">
  <t>Digest-Value: An optional sequence of octets containing the digest as computed in <xref target="computing"/>.</t>
</list></t>

<section anchor="computing" title="Computing the Digest-Value">

<t>The set of URLs that is used to compute Digest-Value MUST only include URLs that share origins
<xref target="RFC6454"/> with the stream that CACHE_DIGEST is sent on, and they MUST be fresh <xref target="RFC7234"/>.</t>

<t>A client MAY choose a subset of the available stored responses to include in the set. Additionally,
it MUST choose a parameter, <spanx style="verb">P</spanx>, that indicates the probability of a false positive it is willing
to tolerate, expressed as <spanx style="verb">1/P</spanx>.</t>

<t><spanx style="verb">P</spanx> MUST be a power of 2.</t>

<t>To compute a digest-value for the set <spanx style="verb">URLs</spanx> and <spanx style="verb">P</spanx>:</t>

<t><list style="numbers">
  <t>Let N be the count of <spanx style="verb">URLs</spanx>’ members, rounded up to power of 2.</t>
  <t>Let <spanx style="verb">hash-values</spanx> be an empty array of integers.</t>
  <t>Append 0 to <spanx style="verb">hash-values</spanx>.</t>
  <t>For each <spanx style="verb">URL</spanx> in URLs, follow these steps:
  <list style="numbers">
      <t>Convert <spanx style="verb">URL</spanx> to an ASCII string by percent-encoding as appropriate <xref target="RFC3986"/>.</t>
      <t>Let <spanx style="verb">key</spanx> be the SHA-256 message digest <xref target="RFC6234"/> of URL, expressed as an integer.</t>
      <t>Append <spanx style="verb">key</spanx> modulo ( <spanx style="verb">N</spanx> * <spanx style="verb">P</spanx> ) to <spanx style="verb">hash-values</spanx>.</t>
    </list></t>
  <t>Sort <spanx style="verb">hash-values</spanx> in ascending order.</t>
  <t>Let <spanx style="verb">digest</spanx> be an empty array of bits.</t>
  <t>Write log base 2 of <spanx style="verb">N</spanx> and <spanx style="verb">P</spanx> to <spanx style="verb">digest</spanx> as octets.</t>
  <t>For each <spanx style="verb">V</spanx> in <spanx style="verb">hash-values</spanx>:
  <list style="numbers">
      <t>Let <spanx style="verb">W</spanx> be the value following <spanx style="verb">V</spanx> in <spanx style="verb">hash-values</spanx>.</t>
      <t>If <spanx style="verb">W</spanx> and <spanx style="verb">V</spanx> are equal, continue to the next <spanx style="verb">V</spanx>.</t>
      <t>Let <spanx style="verb">D</spanx> be the result of <spanx style="verb">W - V - 1</spanx>.</t>
      <t>Let <spanx style="verb">Q</spanx> be the integer result of <spanx style="verb">D / P</spanx>.</t>
      <t>Let <spanx style="verb">R</spanx> be the result of <spanx style="verb">D modulo P</spanx>.</t>
      <t>Write <spanx style="verb">Q</spanx> ‘1’ bits to <spanx style="verb">digest</spanx>.</t>
      <t>Write 1 ‘0’ bit to <spanx style="verb">digest</spanx>.</t>
      <t>Write <spanx style="verb">R</spanx> to <spanx style="verb">digest</spanx> as binary, using log2(P) bits.</t>
      <t>If <spanx style="verb">V</spanx> is the second-to-last member of <spanx style="verb">hash-values</spanx>, stop iterating through <spanx style="verb">hash-values</spanx> and continue to the next step.</t>
    </list></t>
  <t>If the length of <spanx style="verb">digest</spanx> is not a multiple of 8, pad it with 1s until it is.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This draft currently has no requirements for IANA. If the CACHE_DIGEST frame is standardised, it
will need to be assigned a frame type.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The contents of a User Agent’s cache can be used to re-identify or “fingerprint” the user over
time, even when other identifiers (e.g., Cookies <xref target="RFC6265"/>) are cleared.</t>

<t>CACHE_DIGEST allows such cache-based fingerprinting to become passive, since it allows the server
to discover the state of the client’s cache without any visible change in server behaviour.</t>

<t>As a result, clients MUST mitigate for this threat when the user attempts to remove identifiers
(e.g., “clearing cookies”). This could be achieved in a number of ways; for example: by clearing
the cache, by changing one or both of N and P, or by adding new, synthetic entries to the digest to
change its contents.</t>

<t>TODO: discuss how effective the suggested mitigations actually would be.</t>

<t>Additionally, User Agents SHOULD NOT send CACHE_DIGEST when in “privacy mode.”</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor='RFC3986' target='http://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor='RFC6234' target='http://www.rfc-editor.org/info/rfc6234'>
<front>
<title>US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2011' month='May' />
<abstract><t>Federal Information Processing Standard, FIPS</t></abstract>
</front>
<seriesInfo name='RFC' value='6234'/>
<seriesInfo name='DOI' value='10.17487/RFC6234'/>
</reference>



<reference  anchor='RFC6454' target='http://www.rfc-editor.org/info/rfc6454'>
<front>
<title>The Web Origin Concept</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='December' />
<abstract><t>This document defines the concept of an &quot;origin&quot;, which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named &quot;Origin&quot;, that indicates which origins are associated with an HTTP request.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6454'/>
<seriesInfo name='DOI' value='10.17487/RFC6454'/>
</reference>



<reference  anchor='RFC7234' target='http://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor='RFC7540' target='http://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor='RFC6265' target='http://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to Adam Langley and Giovanni Bajo for their explorations of Golumb-coded sets. In
particular, see
<eref target="http://giovanni.bajo.it/post/47119962313/golomb-coded-sets-smaller-than-bloom-filters">http://giovanni.bajo.it/post/47119962313/golomb-coded-sets-smaller-than-bloom-filters</eref>, which
refers to sample code.</t>

</section>


  </back>
</rfc>

