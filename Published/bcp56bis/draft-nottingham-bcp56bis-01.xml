<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-bcp56bis-01" category="bcp" obsoletes="3205">

  <front>
    <title>On the use of HTTP as a Substrate</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>substrate</keyword>

    <abstract>


<t>HTTP is often used as a substrate for other application protocols. This document specifies best
practices for these protocols’ use of HTTP.</t>



    </abstract>


    <note title="Note to Readers ">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/bcp56bis">https://github.com/mnot/I-D/labels/bcp56bis</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/bcp56bis/">https://mnot.github.io/I-D/bcp56bis/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/bcp56bis">https://github.com/mnot/I-D/commits/gh-pages/bcp56bis</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP <xref target="RFC7230"/> is often used as a substrate for other application protocols. This is done for a
variety of reasons, including:</t>

<t><list style="symbols">
  <t>familiarity by implementers, specifiers, administrators, developers and users,</t>
  <t>availability of a variety of client, server and proxy implementations,</t>
  <t>ease of use,</t>
  <t>ubiquity of Web browsers,</t>
  <t>reuse of existing mechanisms like authentication and encryption,</t>
  <t>presence of HTTP servers and clients in target deployments, and</t>
  <t>its ability to traverse firewalls.</t>
</list></t>

<t>The Internet community has a long tradition of protocol reuse, dating back to the use of Telnet
<xref target="RFC0854"/> as a substrate for FTP <xref target="RFC0959"/> and SMTP <xref target="RFC2821"/>. However, layering new
protocols over HTTP brings its own set of issues:</t>

<t><list style="symbols">
  <t>Should an application using HTTP define a new URL scheme? Use new ports?</t>
  <t>Should it use standard HTTP methods and status codes, or define new ones?</t>
  <t>How can the maximum value be extracted from the use of HTTP?</t>
  <t>How does it coexist with other uses of HTTP – especially Web browsing?</t>
  <t>How can interoperability problems and “protocol dead ends” be avoided?</t>
</list></t>

<t>This document contains best current practices regarding the use of HTTP by applications other than
Web browsing. <xref target="used"/> defines what applications it applies to; <xref target="overview"/> surveys the properties
of HTTP that are important to preserve, and <xref target="bp"/> conveys best practices for those applications
that do use HTTP.</t>

<t>It is written primarily to guide IETF efforts to define application protocols using HTTP for
deployment on the Internet, but might be applicable in other situations. Note that the requirements
herein do not necessarily apply to the development of generic HTTP extensions.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="used" title="Is HTTP Being Used?">

<t>Different applications have different goals when using HTTP. In this document, we say an
application is <spanx style="emph">using HTTP</spanx> when any of the following conditions are true:</t>

<t><list style="symbols">
  <t>The transport port in use is 80 or 443,</t>
  <t>The URL scheme “http” or “https” is used,</t>
  <t>The ALPN protocol ID <xref target="RFC7301"/> “http/1.1”, “h2” or “h2c” is used, or</t>
  <t>The message formats described in <xref target="RFC7230"/> and/or <xref target="RFC7540"/> are used in conjunction with the IANA registries defined for HTTP.</t>
</list></t>

<t>When an application is using HTTP, all of the requirements of the HTTP protocol suite (including
but not limited to <xref target="RFC7230"/>, <xref target="RFC7231"/>, <xref target="RFC7232"/>, <xref target="RFC7233"/>, <xref target="RFC7234"/>,
<xref target="RFC7235"/> and <xref target="RFC7540"/>) are in force.</t>

<t>An application might not be <spanx style="emph">using HTTP</spanx> according to this definition, but still relying upon the
HTTP specifications in some manner. For example, an application might wish to avoid re-specifying
parts of the message format, but change others; or, it might want to use a different set of methods.</t>

<t>Such applications are referred to as <spanx style="emph">protocols based upon HTTP</spanx> in this document. These have more
freedom to modify protocol operation, but are also likely to lose at least a portion of the
benefits outlined above, as most HTTP implementations won’t be easily adaptable to these changes,
and as the protocol diverges from HTTP, the benefit of mindshare will be lost.</t>

<t>Protocols that are based upon HTTP MUST NOT reuse HTTP’s URL schemes, transport ports, ALPN
protocol IDs or IANA registries; rather, they are encouraged to establish their own.</t>

</section>
<section anchor="overview" title="What’s Important About HTTP">

<t>There are many ways that HTTP applications are defined and deployed, and sometimes they are brought
to the IETF for standardisation. In that process, what might be workable for deployment in a
limited fashion isn’t appropriate for standardisation and the corresponding broader deployment.</t>

<t>This section examines the facets of the protocol that are important to preserve in these situations.</t>

<section anchor="generic-semantics" title="Generic Semantics">

<t>When writing an application’s specification, it’s often tempting to specify exactly how HTTP is to
be implemented, supported and used.</t>

<t>However, this can easily lead to an unintended profile of HTTP’s behaviour. For example, it’s
common to see specifications with language like this:</t>

<figure><artwork><![CDATA[
A `200 OK` response means that the widget has successfully been updated.
]]></artwork></figure>

<t>This sort of specification is bad practice, because it is adding new semantics to HTTP’s status
codes and methods, respectively; a recipient – whether it’s an origin server, client library,
intermediary or cache – now has to know these extra semantics to understand the message.</t>

<t>Some applications even require specific behaviours, such as:</t>

<figure><artwork><![CDATA[
A `POST` request MUST result in a `201 Created` response.
]]></artwork></figure>

<t>This forms an expectation in the client that the response will always be <spanx style="verb">201 Created</spanx>, when in
fact there are a number of reasons why the status code might differ in a real deployment. If the
client does not anticipate this, the application’s deployment is brittle.</t>

<t>Much of the value of HTTP is in its <spanx style="emph">generic semantics</spanx> – that is, the protocol elements defined
by HTTP are potentially applicable to every resource, not specific to a particular context.
Application-specific semantics are expressed in the payload; mostly, in the body, but also in
header fields.</t>

<t>This allows a HTTP message to be examined by generic HTTP software (e.g., HTTP servers,
intermediaries, client implementatiions), and its handling to be correctly determined. It also
allows people to leverage their knowledge of HTTP semantics without special-casing them for a
particular application.</t>

<t>Therefore, applications that use HTTP MUST NOT re-define, refine or overlay the semantics of
defined protocol elements. Instead, they SHOULD focus their specifications on protocol elements
that are specific to them; namely their HTTP resources.</t>

<t>See <xref target="resource"/> for details.</t>

</section>
<section anchor="links" title="Links">

<t>Another common practice is assuming that the HTTP server’s name space (or a portion thereof) is
exclusively for the use of a single application. This effectively overlays special,
application-specific semantics onto that space, precludes other applications from using it.</t>

<t>As explained in <xref target="RFC7320"/>, such “squatting” on a part of the URL space by a standard usurps the
server’s authority over its own resources, can cause deployment issues, and is therefore bad
practice in standards.</t>

<t>Instead of statically defining URL paths, it is RECOMMENDED that applications using HTTP define
links in payloads, to allow flexibility in deployment.</t>

<t>Using runtime links in this fashion has a number of other benefits. For example, navigating with a
link allows a request to be routed to a different server without the overhead of a redirection,
thereby supporting deployment across machines well. It becomes possible to “mix” different
applications on the same server, and offers a natural path for extensibility, versioning and
capability management.</t>

</section>
<section anchor="getting-value-from-http" title="Getting Value from HTTP">

<t>The simplest possible use of HTTP is to POST data to a single URL, thereby effectively tunnelling
through the protocol.</t>

<t>This “RPC” style of communication does get some benefit from using HTTP – namely, message framing and the availability of implementations – but fails to realise many others:</t>

<t><list style="symbols">
  <t>Caching for server scalability, latency and bandwidth reduction, and reliability;</t>
  <t>Authentication and access control;</t>
  <t>Automatic redirection;</t>
  <t>Partial content to selectively request part of a response;</t>
  <t>Natural support for extensions and versioning through protocol extension; and</t>
  <t>The ability to interact with the application easily using a Web browser.</t>
</list></t>

<t>Using such a high-level protocol to tunnel simple semantics has downsides too; because of its more
advanced capabilities, breadth of deployment and age, HTTP’s complexity can cause interoperability
problems that could be avoided by using a simpler substrate (e.g., WebSockets <xref target="RFC6455"/>, if
browser support is necessary, or TCP <xref target="RFC0793"/> if not), or making the application be <spanx style="emph">based upon
HTTP</spanx>, instead of using it (as defined in <xref target="used"/>).</t>

<t>Applications that use HTTP are encouraged to accommodate the various features that the protocol
offers, so that their users receive the maximum benefit from it. This document does not require
specific features to be used, since the appropriate design tradeoffs are highly specific to a given
situation. However, following the practices in <xref target="bp"/> will help make them available.</t>

</section>
</section>
<section anchor="bp" title="Best Practices for Using HTTP">

<t>This section contains best practices regarding the use of HTTP by applications, including practices
for specific HTTP protocol elements.</t>

<section anchor="specifying-the-use-of-http" title="Specifying the Use of HTTP">

<t>When specifying the use of HTTP, an application SHOULD use <xref target="RFC7230"/> as the primary reference;
it is not necessary to reference all of the specifications in the HTTP suite unless there are
specific reasons to do so (e.g., a particular feature is called out).</t>

<t>Applications using HTTP MAY specify a minimum version to be supported (HTTP/1.1 is suggested), and
MUST NOT specify a maximum version.</t>

<t>Likewise, applications need not specify what HTTP mechanisms – such as redirection, caching,
authentication, proxy authentication, and so on – are to be supported. Full featured support for
HTTP SHOULD be taken for granted in servers and clients, and the application’s function SHOULD
degrade gracefully if they are not (although this might be achieved by informing the user that
their task cannot be completed).</t>

<t>For example, an application can specify that it uses HTTP like this:</t>

<figure><artwork><![CDATA[
Foo Application uses HTTP {{RFC7230}}. Implementations MUST support
HTTP/1.1, and MAY support later versions. Support for common HTTP
mechanisms such as redirection and caching are assumed.
]]></artwork></figure>

</section>
<section anchor="resource" title="Defining HTTP Resources">

<t>HTTP Applications SHOULD focus on defining the following application-specific protocol elements:</t>

<t><list style="symbols">
  <t>Media types <xref target="RFC6838"/>, often based upon a format convention such as JSON <xref target="RFC7159"/>,</t>
  <t>HTTP header fields, as per <xref target="headers"/>, and</t>
  <t>The behaviour of resources, as identified by link relations <xref target="RFC5988"/>.</t>
</list></t>

<t>By composing these protocol elements, an application can define a set of resources, identified by
link relations, that implement specified behaviours, including:</t>

<t><list style="symbols">
  <t>Retrieval of their state using GET, in one or more formats identified by media type;</t>
  <t>Resource creation or update using POST or PUT, with an appropriately identified request body format;</t>
  <t>Data processing using POST and identified request and response body format(s); and</t>
  <t>Resource deletion using DELETE.</t>
</list></t>

<t>For example, an application might specify:</t>

<figure><artwork><![CDATA[
Resources linked to with the "example-widget" link relation type are
Widgets. The state of a Widget can be fetched in the
"application/example-widget+json" format, and can be updated by PUT
to the same link. Widget resources can be deleted.

The "Example-Count" response header field on Widget representations
indicates how many Widgets are held by the sender.

The "application/example-widget+json" format is a JSON {{RFC7159}}
format representing the state of a Widget. It contains links to
related information in the link indicated by the Link header field
value with the "example-other-info" link relation type.
]]></artwork></figure>

</section>
<section anchor="http-urls" title="HTTP URLs">

<t>In HTTP, URLs are opaque identifiers under the control of the server. As outlined in <xref target="RFC7320"/>,
standards cannot usurp this space, since it might conflict with existing resources, and constrain
implementation and deployment.</t>

<t>In other words, applications that use HTTP MUST NOT associate application semantics with specific
URL paths on arbitrary servers. Doing so inappropriately conflates the identity of the resource (its URL) with te capabilities that resource supports, bringing about many of the same interoperability problems that <xref target="RFC4367"/> warns of.</t>

<t>For example, specifying that a “GET to the URL /foo retrieves a bar document” is bad practice.
Likewise, specifying “The widget API is at the path /bar” violates <xref target="RFC7320"/>.</t>

<t>Instead, applications that use HTTP are encouraged to ensure that URLs are discovered at runtime,
allowing HTTP-based services to describe their own capabilities. One way to do this is to use typed
links <xref target="RFC5988"/> to convey the URIs that are in use, as well as the semantics of the resources
that they identify. See <xref target="resource"/> for details.</t>

<section anchor="initial-url-discovery" title="Initial URL Discovery">

<t>Generally, a client with begin interacting with a given application server by requesting an initial
document that contains information about that particular deployment, potentially including links to
other relevant resources.</t>

<t>Applications that use HTTP SHOULD allow an arbitrary URL to be used as that entry point. For
example, rather than specifying “the initial document is at “/foo/v1”, they should allow a
deployment to use any URL as the entry point for the application.</t>

<t>In cases where doing so is impractical (e.g., it is not possible to convey a whole URL, but only a
hostname) applications that use HTTP MAY define a well-known URL <xref target="RFC5785"/> as an entry point.</t>

</section>
<section anchor="scheme" title="URL Schemes">

<t>Applications that use HTTP will typically use the “http” and/or “https” URL schemes. “https” is preferred to mitigate pervasive monitoring attacks <xref target="RFC7258"/>.</t>

<t>However, application-specific schemes can be defined as well.</t>

<t>When defining an URL scheme for an application using HTTP, there are a number of tradeoffs and
caveats to keep in mind:</t>

<t><list style="symbols">
  <t>Unmodified Web browsers will not support the new scheme. While it is possible to register new URL schemes with Web browsers (e.g. registerProtocolHandler() in <xref target="HTML5"/> Section 8.7.1.3, as well as several proprietary approaches), support for these mechanisms is not shared by all browsers, and their capabilities can vary.</t>
  <t>Likewise, existing non-browser clients, intermediaries, servers and associated software will not recognise the new scheme, and might fail to operate. For example, a client library might fail to dispatch the request; a cache might refuse to store the response, and a proxy might fail to forward the request.</t>
  <t>Because URLs occur in and are generated in HTTP artefacts commonly, often without human intervention (e.g., in the <spanx style="verb">Location</spanx> header), it can be difficult to assure that the new scheme is used consistently.</t>
  <t>The resources identified by the new scheme will still be available with “http” and/or “https” URLs to clients. While it is possible to define the relationship between these resources in new new scheme’s specification, existing HTTP software (such as clients, caches, intermediaries and servers) will not be available, so there is a danger of confusion when the “wrong” URL is used.</t>
  <t>Features that rely upon the URL’s origin <xref target="RFC6454"/>, such as the Web’s same-origin policy, will be impacted by a change of scheme.</t>
  <t>HTTP-specific features such as cookies <xref target="RFC6265"/>, authentication <xref target="RFC7235"/>, caching <xref target="RFC7234"/>, and CORS <xref target="FETCH"/> might or might not work correctly, depending on how they are defined and implemented. Generally, they are designed and implemented with an assumption that the URL will always be “http” or “https”.</t>
  <t>Web features that require a secure context <xref target="W3C.CR-secure-contexts-20160915"/> will likely treat a new scheme as insecure.</t>
</list></t>

<t>See <xref target="RFC7595"/> for more information about minting new URL schemes.</t>

</section>
<section anchor="transport-ports" title="Transport Ports">

<t>Applications that use HTTP SHOULD use the default port for the URL scheme in use. If it is felt
that networks might need to distinguish the application’s traffic for operational reasons, it MAY
register a separate port, but be aware that this has privacy implications for that protocol’s
users. The impact of doing so MUST be documented in Security Considerations.</t>

<t>See <xref target="RFC7605"/> for further guidance.</t>

</section>
</section>
<section anchor="http-methods" title="HTTP Methods">

<t>Applications that use HTTP MUST confine themselves to using registered HTTP methods such as GET,
POST, PUT, DELETE, and PATCH.</t>

<t>New HTTP methods are rare; they are required to be registered with IETF Review (see <xref target="RFC7232"/>),
and are also required to be <spanx style="emph">generic</spanx>. That means that they need to be potentially applicable to
all resources, not just those of one application.</t>

<t>While historically some applications (e.g., <xref target="RFC4791"/>) has defined non-generic methods,
<xref target="RFC7231"/> now forbids this.</t>

<t>When it is believed that a new method is required, authors are encouraged to engage with the HTTP
community early, and document their proposal as a separate HTTP extension, rather than as part of
an application’s specification.</t>

</section>
<section anchor="http-status-codes" title="HTTP Status Codes">

<t>Applications that use HTTP MUST only use registered HTTP status codes.</t>

<t>As with methods, new HTTP status codes are rare, and required (by <xref target="RFC7231"/>) to be registered
with IETF review. Similarly, HTTP status codes are generic; they are required (by <xref target="RFC7231"/>) to
be potentially applicable to all resources, not just to those of one application.</t>

<t>When it is believed that a new status code is required, authors are encouraged to engage with the
HTTP community early, and document their proposal as a separate HTTP extension, rather than as part
of an application’s specification.</t>

<t>Status codes’ primary function is to convey HTTP semantics for the benefit of generic HTTP
software, not application-specific semantics. Therefore, applications MUST NOT specify additional
semantics or refine existing semantics for status codes.</t>

<t>In particular, specifying that a particular status code has a specific meaning in the context of an
application is harmful, as these are not generic semantics, since the consumer needs to be in the
context of the application to understand them.</t>

<t>Furthermore, applications using HTTP MUST NOT re-specify the semantics of HTTP status codes, even
if it is only by copying their definition. They MUST NOT require specific status phrases to be
used; the status phrase has no function in HTTP, and is not guaranteed to be preserved by
implementations.</t>

<t>Typically, applications using HTTP will convey application-specific information in the message body
and/or HTTP header fields, not the status code.</t>

<t>Specifications sometimes also create a “laundry list” of potential status codes, in an effort to be
helpful. The problem with doing so is that such a list is never complete; for example, if a network
proxy is interposed, the client might encounter a <spanx style="verb">407 Proxy Authentication Required</spanx> response; or,
if the server is rate limiting the client, it might receive a <spanx style="verb">429 Too Many Requests</spanx> response.</t>

<t>Since the list of HTTP status codes can be added to, it’s safer to refer to it directly, and point
out that clients SHOULD be able to handle all applicable protocol elements gracefully (i.e.,
falling back to the generic <spanx style="verb">n00</spanx> semantics of a given status code; e.g., <spanx style="verb">499</spanx> can be safely
handled as <spanx style="verb">400</spanx> by clients that don’t recognise it).</t>

</section>
<section anchor="headers" title="HTTP Header Fields">

<t>Applications that use HTTP MAY define new HTTP header fields, following the advice in <xref target="RFC7231"/>,
Section 8.3.1.</t>

<t>Typically, using HTTP header fields is appropriate in a few different situations:</t>

<t><list style="symbols">
  <t>Their content is useful to intermediaries (who often wish to avoid parsing the body), and/or</t>
  <t>Their content is useful to generic HTTP software (e.g., clients, servers), and/or</t>
  <t>It is not possible to include their content in the message body (usually because a format does not allow it).</t>
</list></t>

<t>If none of these motivations apply, using a header field is NOT RECOMMENDED.</t>

<t>New header fields MUST be registered, as per <xref target="RFC7231"/> and <xref target="RFC3864"/>.</t>

<t>It is RECOMMENDED that header field names be short (even when HTTP/2 header compression is in
effect, there is an overhead) but appropriately specific. In particular, if a header field is
specific to an application, an identifier for that application SHOULD form a prefix to the header
field name, separated by a “-“.</t>

<t>The semantics of existing HTTP header fields MUST NOT be re-defined without updating their
registration or defining an extension to them (if allowed). For example, an application using HTTP
cannot specify that the <spanx style="verb">Location</spanx> header has a special meaning in a certain context.</t>

<t>See <xref target="state"/> for requirements regarding header fields that carry application state (e.g,. Cookie).</t>

</section>
<section anchor="payload" title="Defining Message Payloads">

</section>
<section anchor="browser" title="Ensuring Browser Interoperability">

</section>
<section anchor="access-control" title="Access Control">

<t>Modern Web browsers constrain the ability of content from one origin (as defined by <xref target="RFC6454"/>)
to access resources from another, to avoid the “confused deputy” problem. As a result, applications
that wish to expose cross-origin data to browsers will need to implement <xref target="W3C.REC-cors-20140116"/>.</t>

<section anchor="state" title="Authentication and Application State">

<t>Applications that use HTTP MAY use stateful cookies <xref target="RFC6265"/> to identify a client and/or store
client-specific data to contextualise requests.</t>

<t>If it is only necessary to identify clients, applications that use HTTP MAY use HTTP authentication
<xref target="RFC7235"/>; if the Basic authentication scheme <xref target="RFC7617"/> is used, it MUST NOT be used with the
‘http’ URL scheme.</t>

<t>In either case, it is important to carefully specify the scoping and use of these mechanisms; if
they expose sensitive data or capabilities (e.g., by acting as an ambient authority), exploits are
possible. Mitigations include using a request-specific token to assure the intent of the client.</t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no requirements for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t><xref target="state"/> discusses the impact of using stateful mechanisms in the protocol as ambient authority,
and suggests a mitigation.</t>

<t><xref target="scheme"/> requires support for ‘https’ URLs, and discourages the use of ‘http’ URLs, to mitigate
pervasive monitoring attacks.</t>

<t>Applications that use HTTP in a manner that involves modification of implementations – for
example, requiring support for a new URL scheme, or a non-standard method – risk having those
implementations “fork” from their parent HTTP implementations, with the possible result that they
do not benefit from patches and other security improvements incorporated upstream.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7301" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7232" target='https://www.rfc-editor.org/info/rfc7232'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP/1.1 conditional requests, including metadata header fields for indicating state changes, request header fields for making preconditions on such state, and rules for constructing the responses to a conditional request when one or more preconditions evaluate to false.</t></abstract>
</front>
<seriesInfo name='RFC' value='7232'/>
<seriesInfo name='DOI' value='10.17487/RFC7232'/>
</reference>



<reference  anchor="RFC7233" target='https://www.rfc-editor.org/info/rfc7233'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='Y.' surname='Lafon' fullname='Y. Lafon' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines range requests and the rules for constructing and combining responses to those requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='7233'/>
<seriesInfo name='DOI' value='10.17487/RFC7233'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC7235" target='https://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7320" target='https://www.rfc-editor.org/info/rfc7320'>
<front>
<title>URI Design and Ownership</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2014' month='July' />
<abstract><t>Section 1.1.1 of RFC 3986 defines URI syntax as &quot;a federated and extensible naming system wherein each scheme's specification may further restrict the syntax and semantics of identifiers using that scheme.&quot;  In other words, the structure of a URI is defined by its scheme.  While it is common for schemes to further delegate their substructure to the URI's owner, publishing independent standards that mandate particular forms of URI substructure is inappropriate, because that essentially usurps ownership.  This document further describes this problematic practice and provides some acceptable alternatives for use in standards.</t></abstract>
</front>
<seriesInfo name='BCP' value='190'/>
<seriesInfo name='RFC' value='7320'/>
<seriesInfo name='DOI' value='10.17487/RFC7320'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC3864" target='https://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>



<reference anchor="W3C.REC-cors-20140116"
           target='http://www.w3.org/TR/2014/REC-cors-20140116'>
<front>
<title>Cross-Origin Resource Sharing</title>

<author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
    <organization />
</author>

<date month='January' day='16' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-cors-20140116' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-cors-20140116' />
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="HTML5" target="https://html.spec.whatwg.org">
  <front>
    <title>HTML - Living Standard</title>
    <author initials="." surname="various" fullname="various">
      <organization>WHATWG</organization>
    </author>
    <date year="2017" month="September" day="22"/>
  </front>
</reference>
<reference anchor="FETCH" target="https://fetch.spec.whatwg.org">
  <front>
    <title>Fetch - Living Standard</title>
    <author initials="." surname="various" fullname="various">
      <organization>WHATWG</organization>
    </author>
    <date year="2017" month="September" day="22"/>
  </front>
</reference>




<reference  anchor="RFC0854" target='https://www.rfc-editor.org/info/rfc854'>
<front>
<title>Telnet Protocol Specification</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.K.' surname='Reynolds' fullname='J.K. Reynolds'><organization /></author>
<date year='1983' month='May' />
<abstract><t>This is the specification of the Telnet protocol used for remote    terminal access in the ARPA Internet.  The purpose of the TELNET    Protocol is to provide a fairly general, bi-directional, eight-bit    byte oriented communications facility.  Its primary goal is to allow    a standard method of interfacing terminal devices and    terminal-oriented processes to each other.  It is envisioned that the    protocol may also be used for terminal-terminal communication    (&quot;linking&quot;) and process-process communication (distributed    computation).   This RFC specifies a standard for the ARPA Internet    community.  Hosts on the ARPA Internet are expected to adopt and    implement this standard.  Obsoletes NIC 18639.</t></abstract>
</front>
<seriesInfo name='STD' value='8'/>
<seriesInfo name='RFC' value='854'/>
<seriesInfo name='DOI' value='10.17487/RFC0854'/>
</reference>



<reference  anchor="RFC0959" target='https://www.rfc-editor.org/info/rfc959'>
<front>
<title>File Transfer Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.' surname='Reynolds' fullname='J. Reynolds'><organization /></author>
<date year='1985' month='October' />
<abstract><t>This memo is the official specification of the File Transfer Protocol    (FTP) for the DARPA Internet community.  The primary intent is to    clarify and correct the documentation of the FTP specification, not to    change the protocol.  The following new optional commands are included    in this edition of the specification:  Change to Parent Directory    (CDUP), Structure Mount (SMNT), Store Unique (STOU), Remove Directory    (RMD), Make Directory (MKD), Print Directory (PWD), and System (SYST).    Note that this specification is compatible with the previous edition.</t></abstract>
</front>
<seriesInfo name='STD' value='9'/>
<seriesInfo name='RFC' value='959'/>
<seriesInfo name='DOI' value='10.17487/RFC0959'/>
</reference>



<reference  anchor="RFC2821" target='https://www.rfc-editor.org/info/rfc2821'>
<front>
<title>Simple Mail Transfer Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin' role='editor'><organization /></author>
<date year='2001' month='April' />
<abstract><t>This document is a self-contained specification of the basic protocol for the Internet electronic mail transport.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2821'/>
<seriesInfo name='DOI' value='10.17487/RFC2821'/>
</reference>



<reference  anchor="RFC6455" target='https://www.rfc-editor.org/info/rfc6455'>
<front>
<title>The WebSocket Protocol</title>
<author initials='I.' surname='Fette' fullname='I. Fette'><organization /></author>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'><organization /></author>
<date year='2011' month='December' />
<abstract><t>The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code.  The security model used for this is the origin-based security model commonly used by web browsers.  The protocol consists of an opening handshake followed by basic message framing, layered over TCP.  The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6455'/>
<seriesInfo name='DOI' value='10.17487/RFC6455'/>
</reference>



<reference  anchor="RFC0793" target='https://www.rfc-editor.org/info/rfc793'>
<front>
<title>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='7'/>
<seriesInfo name='RFC' value='793'/>
<seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC4367" target='https://www.rfc-editor.org/info/rfc4367'>
<front>
<title>What's in a Name: False Assumptions about DNS Names</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg' role='editor'><organization /></author>
<author><organization>IAB</organization></author>
<date year='2006' month='February' />
<abstract><t>The Domain Name System (DNS) provides an essential service on the Internet, mapping structured names to a variety of data, usually IP addresses.  These names appear in email addresses, Uniform Resource Identifiers (URIs), and other application-layer identifiers that are often rendered to human users.  Because of this, there has been a strong demand to acquire names that have significance to people, through equivalence to registered trademarks, company names, types of services, and so on.  There is a danger in this trend; the humans and automata that consume and use such names will associate specific semantics with some names and thereby make assumptions about the services that are, or should be, provided by the hosts associated with the names.  Those assumptions can often be false, resulting in a variety of failure conditions.  This document discusses this problem in more detail and makes recommendations on how it can be avoided.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='4367'/>
<seriesInfo name='DOI' value='10.17487/RFC4367'/>
</reference>



<reference  anchor="RFC5785" target='https://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor="RFC7258" target='https://www.rfc-editor.org/info/rfc7258'>
<front>
<title>Pervasive Monitoring Is an Attack</title>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2014' month='May' />
<abstract><t>Pervasive monitoring is a technical attack that should be mitigated in the design of IETF protocols, where possible.</t></abstract>
</front>
<seriesInfo name='BCP' value='188'/>
<seriesInfo name='RFC' value='7258'/>
<seriesInfo name='DOI' value='10.17487/RFC7258'/>
</reference>



<reference  anchor="RFC6454" target='https://www.rfc-editor.org/info/rfc6454'>
<front>
<title>The Web Origin Concept</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='December' />
<abstract><t>This document defines the concept of an &quot;origin&quot;, which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named &quot;Origin&quot;, that indicates which origins are associated with an HTTP request.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6454'/>
<seriesInfo name='DOI' value='10.17487/RFC6454'/>
</reference>



<reference  anchor="RFC6265" target='https://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>



<reference anchor="W3C.CR-secure-contexts-20160915"
           target='https://www.w3.org/TR/2016/CR-secure-contexts-20160915'>
<front>
<title>Secure Contexts</title>

<author initials='M.' surname='West' fullname='Mike West'>
    <organization />
</author>

<date month='September' day='15' year='2016' />
</front>

<seriesInfo name='World Wide Web Consortium CR' value='CR-secure-contexts-20160915' />
<format type='HTML' target='https://www.w3.org/TR/2016/CR-secure-contexts-20160915' />
</reference>



<reference  anchor="RFC7595" target='https://www.rfc-editor.org/info/rfc7595'>
<front>
<title>Guidelines and Registration Procedures for URI Schemes</title>
<author initials='D.' surname='Thaler' fullname='D. Thaler' role='editor'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<date year='2015' month='June' />
<abstract><t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t></abstract>
</front>
<seriesInfo name='BCP' value='35'/>
<seriesInfo name='RFC' value='7595'/>
<seriesInfo name='DOI' value='10.17487/RFC7595'/>
</reference>



<reference  anchor="RFC7605" target='https://www.rfc-editor.org/info/rfc7605'>
<front>
<title>Recommendations on Using Assigned Transport Port Numbers</title>
<author initials='J.' surname='Touch' fullname='J. Touch'><organization /></author>
<date year='2015' month='August' />
<abstract><t>This document provides recommendations to designers of application and service protocols on how to use the transport protocol port number space and when to request a port assignment from IANA.  It provides designer guidance to requesters or users of port numbers on how to interact with IANA using the processes defined in RFC 6335; thus, this document complements (but does not update) that document.</t></abstract>
</front>
<seriesInfo name='BCP' value='165'/>
<seriesInfo name='RFC' value='7605'/>
<seriesInfo name='DOI' value='10.17487/RFC7605'/>
</reference>



<reference  anchor="RFC4791" target='https://www.rfc-editor.org/info/rfc4791'>
<front>
<title>Calendaring Extensions to WebDAV (CalDAV)</title>
<author initials='C.' surname='Daboo' fullname='C. Daboo'><organization /></author>
<author initials='B.' surname='Desruisseaux' fullname='B. Desruisseaux'><organization /></author>
<author initials='L.' surname='Dusseault' fullname='L. Dusseault'><organization /></author>
<date year='2007' month='March' />
<abstract><t>This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing calendaring and scheduling information based on the iCalendar format.  This document defines the &quot;calendar-access&quot; feature of CalDAV.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4791'/>
<seriesInfo name='DOI' value='10.17487/RFC4791'/>
</reference>



<reference  anchor="RFC7617" target='https://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>




    </references>


<section anchor="changes-from-rfc3205" title="Changes from RFC3205">

<t>RFC3205 captured the Best Current Practice in the early 2000’s, based on the concerns facing
protocol designers at the time. Use of HTTP has changed considerably since then, and as a result
this document is substantially different. As a result, the changes are too numerous to list
individually.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIABWFxFkAA8Vca3PbyHL9jl+B0B9s3ZDUw5ZfSmWjle21Est2LDlbt1Ip
e0gMSVyBAC8GkMy4/N/Tp7tnMABl7a1bSWU/eEUSGMxMv06f7sFkMkmavCns
y/RDmTYrm7bOptUifXt19TE1LjXpZTtzTW0am2TVvDRrujSrzaKZlFXT5OVy
ZdaT2Xxz/HSWu8nBYZLRpS/To4PDZ8mc/lxW9fZlShck1cxVhW2se5k+Pjo4
TpJ8U79Mm7p1zdHBwYuDo8TU1rxMf7OlrU2R3Fb19bKu2s3L5Npu6VP2Mj0v
G1uXtpm8whS67zHd7tPvdtZ9cGH+iWtMmX0xRVXSDLfWJZv8ZfqfTTUfp/RP
Xma2bMapq+qmtgtHf23X+kdT53P6aV6tN0b/WNPF9FNeFnlp/ytJTNusqvpl
kk6SlP7LS1rnxTR9H3aJv5YNvDD19fCXql6aMv9v0+RV+ZK/sWuTFy/TNW30
v+CfKS2cf2hrmveqaTbu5f7+7e3t1P+6T5taLqp6TaPcWIzy9uri3bEM15h6
aZvuxlWzLqZuY+fT25VpbpdTmoFcKAqBW9NJ+i6/oVmml9g7U2d8RVgr/pP1
hjXfmDqvWhe+lBUPv6VnkZzenl79/ht/12nN5ODF5OiIvnzz+urs7d1TX9hm
vrpv7m9wwf/f5JNkMpmkhhVv3iQJW1PuyLAaW8LEMrGtoJspCS2tyP7q1Gw2
RT5nNUg3dUWKWRVuml6t6H6ywBZ6l2Lp+SK3Lp1Z1yQbPCaf00eMQ8OQEYd7
H8Y2PdW5kcLYL+/xT1N9+WRNZmv3JUmuyAPkzrU0UpG7RofDk2Fv6dyU9ED6
ti1pBU36T14gy7xZtbMpmcU+dHH/fPJqvzAzW7h97xv+eSrDrysat7ZzLOMR
b8g4bctNO6MHrmy2p4+iZ8YPYA3Xp+QVj+8H3sfIn2TA+cqUS5o8eRJegP3j
acKU88btL1eTjaF7exPmvVrnWVaQ+3gA91NXWTuHcFSq37//w6c3Z8+OHh/8
+PG/IWKWcilXmwSaZ5stpEe+0VUle5x50Wak1i+T5E/pwqzzIqfL6KrZNs3X
m8JCRUie46Am+Ntk67zMeS4VPmf2xhbVhn5LyTgwY/qWBjQ35HXMjAaV55o0
msS8yMVH2voGC6EbaQHfoufyqnggmi+rHY2Mj+0s/2urY5KDTmd1deufWVtV
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
nHuTZwz82Tf8D3YRcHGGXAAA

-->

</rfc>

