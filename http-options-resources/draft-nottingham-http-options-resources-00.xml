<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.28 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-http-options-resources-00" category="info">

  <front>
    <title abbrev="HTTP Options Resources">Well-Known Resources for HTTP OPTIONS</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Akamai Technologies</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>http://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2015"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines a well-known URI that “http://” and “https://” origin servers can use to
assign distinct URLs for their OPTIONS responses, thereby making them fully available as resources
on the Web, as well as cacheable.</t>



    </abstract>


    <note title="Note to Readers">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/http-options-resources">https://github.com/mnot/I-D/labels/http-options-resources</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/http-options-resources/">https://mnot.github.io/I-D/http-options-resources/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/http-options-resources">https://github.com/mnot/I-D/commits/gh-pages/http-options-resources</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP says the OPTIONS method “allows a client to determine the options and/or requirements
associated with a resource, or the capabilities of a server, without implying a resource action.”
<xref target="RFC7231"/></t>

<t>CORS <xref target="W3C.REC-cors-20140116"/> uses OPTIONS to perform a “pre-flight” request to determine whether
a given resource will allow a state-changing cross-origin request.</t>

<t>This has some unfortunate deployment characteristics. In particular, because OPTIONS is not
cacheable, an intermediary will forward each and every pre-flight request to the origin server,
adding potentially substantial delay to interaction. For high-volume services, the bandwidth
overhead can be more than trivial, since OPTIONS does not support conditional requests <xref target="RFC7232"/>.</t>

<t>Furthermore, because OPTIONS responses don’t have distinct URLs, it’s difficult to incorporate them
into the Web; for example, if they were to be cached, a cache invalidation mechanism would have to
convey the method as well as the URL to be able to invalidate them separately.</t>

<t>This document defines a well-known URI <xref target="RFC5785"/> that “http://” and “https://” origin servers can
use to assign distinct URLs for their OPTIONS responses, thereby making them fully available as
resources on the Web, as well as cacheable.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="the-options-well-known-uri" title="The “options” well-known URI">

<t>The ‘options’ well-known URI <xref target="RFC5785"/> defines a space whereby an origin server exposes a set of
options resources, each which operates in an identical fashion to the corresponding target resource
on the origin server, except that they respond to GET requests as if the method had been OPTIONS.</t>

<t>A given options URL can be calculated for a target URL by appending the well-known URI. Examples of
paired target URLs and options URLs follow:</t>

<figure><artwork><![CDATA[
http://example.com/ -> http://example.com/.well-known/options/
https://example.com/ -> https://example.com/.well-known/options/
http://example.org/foo -> http://example.org/.well-known/options/foo
http://example.org/?bar -> http://example.org/.well-known/options/?bar
]]></artwork></figure>

<t>This means that the following HTTP/1.1 requests will return the same representation:</t>

<figure><artwork><![CDATA[
OPTIONS /foo HTTP/1.1
Host: example.com

GET /.well-known/options/foo HTTP/1.1
Host: example.com
]]></artwork></figure>

<t>The well-known URI “/.well-known/options” (note the lack of a trailing “/”) itself is used as a
resource for “OPTIONS *”.</t>

<section anchor="clients" title="Client Operation">

<t>A HTTP client that implements this specification can probe the origin server for support by
optimistically making a GET request for either the root options URL “/.well-known/options” (note
the lack of a trailing “/”), or the options URL for the specific resource to be queried (e.g,.
“/.well-known/options/example/”).</t>

<t>A 404 (Not Found) or 410 (Gone) response indicates that the origin server does not support this
specification, and the client SHOULD retry the request using the OPTIONS method on the target
resource. Clients SHOULD negatively cache the availability of OPTIONS resources for a given origin
server; if the 404 or 410 response lacks explicit freshness information, they SHOULD use a
heuristic freshness lifetime (e.g., one day).</t>

<t>Alternatively, clients can discover support for this specification by examining the
Content-Location header field on responses to OPTIONS requests; if it is present and contains a
value beginning with “/.well-known/options”, the client MAY assume that the origin server supports
it.</t>

<t>Clients MAY cache responses to options URLs <xref target="RFC7234"/>, MAY send conditional requests for them
<xref target="RFC7232"/>, and MAY request partial content <xref target="RFC7233"/>. Clients SHOULD follow redirects from
options URLs <xref target="RFC7231"/>.</t>

</section>
<section anchor="origin-server-operation" title="Origin Server Operation">

<t>A HTTP origin server that implements this specification MUST respond to requests for options URLs
as if the client had performed the same request using the OPTIONS method upon the target resource,
except that:</t>

<t><list style="symbols">
  <t>The origin server SHOULD send appropriate caching metadata <xref target="RFC7234"/></t>
  <t>The origin server SHOULD respond to conditional requests appropriately <xref target="RFC7232"/></t>
  <t>The origin server MAY respond to range requests with partial content <xref target="RFC7233"/></t>
</list></t>

<t>In particular, origin servers should note that 200 (OK) responses from options URLs are cacheable
by default <xref target="RFC7234"/>, and so if they are not intended to be cached, the need to include
appropriate metadata (e.g., Cache-Control: no-store).</t>

<t>Origin servers that implement this specification MUST do so for all resources they are
authoritative for; i.e., implementation is origin-wide, and cannot be selectively applied to
specific resources.</t>

<t>For backwards compatibility, origin servers that implement this specification MUST continue to
respond to OPTIONS requests as they would have otherwise. These responses SHOULD have an
appropriate Content-Location header field <xref target="RFC7231"/>.</t>

</section>
<section anchor="intermediary-operation" title="Intermediary Operation">

<t>An intermediary MAY optimistically translate OPTIONS requests into GET requests on options URLs,
provided that they fall back to making OPTIONS requests if the origin server does not implement
this specification.</t>

<t>Such intermediaries are required to respect the max-forwards header, as per <xref target="RFC7232"/>.</t>

<t>Note that an intermediary MAY use options URLs entirely for internal purposes; i.e., client might
make OPTIONS requests, and they might be forwarded as OPTIONS requests due to lack of server-side
support, but the intermediary can still use options URLs internally to effect caching, offer
additional services such as cache invalidation using those URLs, etc.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document registers the value “options” in the Well-Known URI Registry <xref target="RFC5785"/>.</t>

<t><list style="symbols">
  <t>URI suffix: options</t>
  <t>Change controller: Mark Nottingham <eref target="mailto:mnot@mnot.net">mnot@mnot.net</eref></t>
  <t>Specification document(s): [this document]</t>
  <t>Related information: Registered for “http” and “https” URI schemes.</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Options URLs have similar security considerations to using OPTIONS on target URLs. However, because
they can be cached, servers need to be careful to set appropriate caching policy.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor='RFC5785' target='http://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor='RFC7231' target='http://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor='RFC7232' target='http://www.rfc-editor.org/info/rfc7232'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP/1.1 conditional requests, including metadata header fields for indicating state changes, request header fields for making preconditions on such state, and rules for constructing the responses to a conditional request when one or more preconditions evaluate to false.</t></abstract>
</front>
<seriesInfo name='RFC' value='7232'/>
<seriesInfo name='DOI' value='10.17487/RFC7232'/>
</reference>



<reference  anchor='RFC7233' target='http://www.rfc-editor.org/info/rfc7233'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='Y.' surname='Lafon' fullname='Y. Lafon' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines range requests and the rules for constructing and combining responses to those requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='7233'/>
<seriesInfo name='DOI' value='10.17487/RFC7233'/>
</reference>



<reference  anchor='RFC7234' target='http://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference anchor='W3C.REC-cors-20140116'
           target='http://www.w3.org/TR/2014/REC-cors-20140116'>
<front>
<title>Cross-Origin Resource Sharing</title>

<author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
    <organization />
</author>

<date month='January' day='16' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-cors-20140116' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-cors-20140116' />
</reference>




    </references>


<section anchor="deployment" title="Deployment">

<t>The obvious benefit of deploying this specification is that it allows HTTP “reverse” proxies and
Content Delivery Networks to cache and serve OPTIONS responses. However, this requires OPTIONS
requests to be transformed into options URLs at some point.</t>

<t>This transformation can be done in user agents, intermediaries and origin servers.</t>

<t>For example, user agents can decide to use options URLs for internal caching purposes, and emit
requests for them when they know the server supports this specification.</t>

<t>Intermediaries can translate incoming OPTIONS requests into options URLs when they know the origin
server supports them, and can reason about OPTIONS requests using them internally.</t>

<t>Origin servers can translate options URLs into OPTIONS requests internally with a fairly simple
modification.</t>

<t>These transformations need not be coordinated, and can happen concurrently as long as clients
conform to the requirements upon them in <xref target="clients"/>.</t>

</section>


  </back>
</rfc>

